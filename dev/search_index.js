var documenterSearchIndex = {"docs":
[{"location":"#Hrse.jl-Documentation","page":"Hrse.jl Documentation","title":"Hrse.jl Documentation","text":"","category":"section"},{"location":"","page":"Hrse.jl Documentation","title":"Hrse.jl Documentation","text":"Depth = 4","category":"page"},{"location":"#Getting-Started","page":"Hrse.jl Documentation","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Hrse.jl Documentation","title":"Hrse.jl Documentation","text":"Hrse.jl is a Julia package for reading and writing files written in HRSE, or Human Readable S-Expressions, which are a human-readable format for representing data and configuration files that is equivalent and and interchangeable with s-expressions.","category":"page"},{"location":"","page":"Hrse.jl Documentation","title":"Hrse.jl Documentation","text":"Hrse.jl provides two main functions, readhrse and writehrse, which read and write HRSE files, respectively.","category":"page"},{"location":"#API","page":"Hrse.jl Documentation","title":"API","text":"","category":"section"},{"location":"","page":"Hrse.jl Documentation","title":"Hrse.jl Documentation","text":"Hrse.readhrse\nHrse.ReadOptions\nHrse.writehrse\nHrse.ashrse\nHrse.PrinterOptions\nHrse.CommentedElement\nHrse.Extension\nHrse.DENSE\nHrse.PairMode\nHrse.CONDENSED_MODE\nHrse.DOT_MODE\nHrse.EQUALS_MODE\nHrse.COLON_MODE","category":"page"},{"location":"#Hrse.readhrse","page":"Hrse.jl Documentation","title":"Hrse.readhrse","text":"readhrse(hrse::IO; options=ReadOptions())\nreadhrse(hrse::String; options=ReadOptions())\n\nReads an HRSE file from the given IO object or string and returns the corresponding Julia object. The options argument can be used to configure the parser. Lists will be read as vectors, pairs as a Pair, symbols and strings as a String, and  numeric types as the corresponding Julia type defined in the parser options.\n\nExamples\n\njulia> import Hrse\n\njulia> hrse = \"\"\"\n       alpha:\n           1 2 3 4\n           5 6\n           7 8 9\n       beta: (0 . 3)\n       gamma:\n           a: 1\n           b: 2\n           c: \"c\"\n       \"\"\";\n\njulia> Hrse.readhrse(hrse)\n3-element Vector{Pair{String}}:\n \"alpha\" => [[1, 2, 3, 4], [5, 6], [7, 8, 9]]\n  \"beta\" => (0 => 3)\n \"gamma\" => Pair{String}[\"a\" => 1, \"b\" => 2, \"c\" => \"c\"]\n\nSee also ReadOptions.\n\n\n\n\n\n","category":"function"},{"location":"#Hrse.ReadOptions","page":"Hrse.jl Documentation","title":"Hrse.ReadOptions","text":"ReadOptions(kwargs...)\n\nStores options for parsing HRSE files.\n\nArguments\n\nintegertypes = [Int64, BigInt]: A list of signed integer types to try parsing integers as. The first type that can   represent the integer will be used.\nfloattype = Float64: The floating point type to parse floating point numbers as.\nreadcomments = false: Whether to read comments and store them in CommentedElement objects; if false, comments are  ignored.\nextensions: A collection of Extensions to HRSE.\n\nSee also readhrse.\n\n\n\n\n\n","category":"type"},{"location":"#Hrse.writehrse","page":"Hrse.jl Documentation","title":"Hrse.writehrse","text":"writehrse(io::IO, obj, options::PrinterOptions)\nwritehrse(obj, options::PrinterOptions)\n\nWrites the given Julia object to the given IO object as a HRSE file. The options argument can be used to configure the behavior of the printer. If no IO object is given, the output is written to stdout.\n\nExamples\n\njulia> import Hrse\n\njulia> hrse = [\n           :alpha => [\n               [1, 2, 3, 4],\n               [5, 6],\n               [7, 8, 9]\n           ],\n           :beta => (0 => 3),\n           :gamma => [\n               :a => 1\n               :b => 2\n               :c => :c\n           ]\n       ];\n\njulia> Hrse.writehrse(hrse, Hrse.PrinterOptions())\nalpha: \n  1 2 3 4\n  5 6\n  7 8 9\nbeta: 0: 3\ngamma: \n  a: 1\n  b: 2\n  c: c\n\nSee also PrinterOptions.\n\n\n\n\n\n","category":"function"},{"location":"#Hrse.ashrse","page":"Hrse.jl Documentation","title":"Hrse.ashrse","text":"ashrse(obj, options::PrinterOptions)\n\nReturns the given Julia object as a string containing a HRSE file. The options argument can be used to configure the behavior of the printer.\n\nSee also writehrse, PrinterOptions.\n\n\n\n\n\n","category":"function"},{"location":"#Hrse.PrinterOptions","page":"Hrse.jl Documentation","title":"Hrse.PrinterOptions","text":"PrinterOptions(kwargs...)\n\nStores options for printing HRSE structures to text.\n\nArguments\n\nindent = \"  \": The string to use for indentation.\ncomments = true: Whether to print comments from CommentedElement objects; if false, comments are ignored.\nextensions: A collection of Extensions to HRSE.\npairmode = COLON_MODE: The PairMode to use when printing pairs.\ninlineprimitives = 20: The maximum string length of a list of primitives to print on a single line instead of adding  a new indentation level.\n\nSee also writehrse, ashrse.\n\n\n\n\n\n","category":"type"},{"location":"#Hrse.CommentedElement","page":"Hrse.jl Documentation","title":"Hrse.CommentedElement","text":"CommentedElement(element, comments)\n\nWraps an element with a list of comments which directly precede it attached to it.\n\n\n\n\n\n","category":"type"},{"location":"#Hrse.Extension","page":"Hrse.jl Documentation","title":"Hrse.Extension","text":"An extension to HRSE's syntax that affects parsing and/or printing.\n\nSee also DENSE.\n\n\n\n\n\n","category":"type"},{"location":"#Hrse.DENSE","page":"Hrse.jl Documentation","title":"Hrse.DENSE","text":"An extension to HRSE; axpects a \"dense\" HRSE file with a single root-level element instead of a list of elements.\n\nSee also Extension.\n\n\n\n\n\n","category":"constant"},{"location":"#Hrse.PairMode","page":"Hrse.jl Documentation","title":"Hrse.PairMode","text":"A flag that decides how pairs are displayed while printing a HRSE structure.\n\nSee also CONDENSED_MODE, DOT_MODE, EQUALS_MODE, COLON_MODE.\n\n\n\n\n\n","category":"type"},{"location":"#Hrse.CONDENSED_MODE","page":"Hrse.jl Documentation","title":"Hrse.CONDENSED_MODE","text":"A pair printing mode; pairs should all be condensed to a single line using classic s-expressions, eleminating as many spaces as possible.\n\nSee also PairMode.\n\n\n\n\n\n","category":"constant"},{"location":"#Hrse.DOT_MODE","page":"Hrse.jl Documentation","title":"Hrse.DOT_MODE","text":"A pair printing mode; pairs should all be displayed using classic s-expressions with dot-deliminated pairs, using indentation to show nesting.\n\nSee also PairMode.\n\n\n\n\n\n","category":"constant"},{"location":"#Hrse.EQUALS_MODE","page":"Hrse.jl Documentation","title":"Hrse.EQUALS_MODE","text":"A pair printing mode; pairs should all be displayed using equals-sign-deliminated pairs with implied parentheses, using indentation to show nesting.\n\nSee also PairMode.\n\n\n\n\n\n","category":"constant"},{"location":"#Hrse.COLON_MODE","page":"Hrse.jl Documentation","title":"Hrse.COLON_MODE","text":"A pair printing mode; pairs should all be displayed using colon-deliminated pairs with implied parentheses, using indentation to show nesting and avoiding parentheses around lists as possible.\n\nSee also PairMode.\n\n\n\n\n\n","category":"constant"}]
}
